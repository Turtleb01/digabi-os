#!/bin/bash

set -e

umask 022

# we require building from git
if ! git rev-parse --is-inside-work-tree; then
    echo "${PWD} is not a Git tree. Exiting."
    exit 1
fi

set -a
. config/digabi
if [ -e config/digabi.local ] ; then
   . config/digabi.local
fi
set +a

# get LB_BINARY_IMAGES
. config/binary

# get LB_ARCHITECTURE and LB_DISTRIBUTION
. config/bootstrap

# Run pre-build hooks
PRE_BUILD_HOOKS="$(ls ${PWD}/config/hooks/normal/*.pre-build)"

if [ -n "${PRE_BUILD_HOOKS}" ]
then
    echo "I: Executing pre-build hooks..."
fi

for hook in ${PRE_BUILD_HOOKS}
do
    hook_base="$(basename ${hook})"
    if [ -x "${hook}" ]
    then
        echo "I: Executing hook ${hook_base}..."
        ${hook}
    else
        echo "W: Non-executable hook ${hook_base}."
    fi
done

_DIGABI_TARGET="$(echo ${DIGABI_BUILD_TARGET} |sed 's/\ /\+/g')"

VERSION_META="config/includes.chroot/var/lib/digabi/version"
VERSION_DIR="$(dirname ${VERSION_META})"

if [ ! -d "${VERSION_DIR}" ]
then
    mkdir -p "${VERSION_DIR}"
fi

GIT_SHORT_ID="$(git rev-parse --short HEAD)"
if GIT_TAG="$(git describe --tags --exact-match ${GIT_CURRENT_COMMIT} 2>/dev/null)"
then
    CLEAN_GIT_TAG="_$(echo "$GIT_TAG" | sed -e 's,/,_,g' -e 's,-rc,~rc,')"
else
    CLEAN_GIT_TAG=""
fi

if [ -n "${BUILD_NUMBER}" ]
then
    _BUILD_NUMBER="+${BUILD_NUMBER}"
else
    _BUILD_NUMBER=""
fi
DIGABI_VERSION_FULL="${DIGABI_VERSION}${_BUILD_NUMBER}-${_DIGABI_TARGET}-${LB_ARCHITECTURE}-${DIGABI_NOW}-${GIT_SHORT_ID}${CLEAN_GIT_TAG}"
BUILD_BASENAME="${DIGABI_DIST_NAME}-${DIGABI_VERSION_FULL}"

# Remember to update digabi-feedback if changing format of version metafile
cat >> ${VERSION_META} <<EOF
DIGABI_VERSION="${DIGABI_VERSION}"
DIGABI_DIST_NAME="${DIGABI_DIST_NAME}"
DIGABI_DIST_NAME_SHORT="${DIGABI_DIST_NAME_SHORT}"
DIGABI_ARCH="${LB_ARCHITECTURE}"
DIGABI_TARGET="${_DIGABI_TARGET}"
DIGABI_NOW="${DIGABI_NOW}"
DIGABI_IMAGE="${LB_BINARY_IMAGES}"
DIGABI_GIT_SHORT_ID="${GIT_SHORT_ID}"
DIGABI_VERSION_FULL="${DIGABI_VERSION_FULL}"
EOF

BUILD_FILENAME="${LB_IMAGE_NAME}-${LB_ARCHITECTURE}"
case "${LB_BINARY_IMAGES}" in
    iso)
        BUILD_FILENAME_EXT="iso"
        BUILD_FILENAME_FULL="${BUILD_FILENAME}.${BUILD_FILENAME_EXT}"
    ;;
    iso-hybrid)
        BUILD_FILENAME_EXT="hybrid.iso"
        BUILD_FILENAME_FULL="${BUILD_FILENAME}.${BUILD_FILENAME_EXT}"
    ;;
    hdd)
        BUILD_FILENAME_EXT="img"
        BUILD_FILENAME_FULL="${BUILD_FILENAME}"
    ;;
    *)
        echo "E: Unsupported image format: ${LB_BINARY_IMAGES}."
        exit 1
    ;;
esac

BUILD_DEST_FILENAME="${BUILD_BASENAME}.${BUILD_FILENAME_EXT}"
BUILD_MANIFEST="${BUILD_DEST_FILENAME}.list"
BUILD_PACKAGES="${BUILD_DEST_FILENAME}.packages"
BUILD_LOG="${BUILD_DEST_FILENAME}.buildlog"
BUILD_CONFIG="${BUILD_DEST_FILENAME}.config.tar.xz"

echo "Building ${LB_BINARY_IMAGES} image ${BUILD_BASENAME}..."
set -o pipefail
if time lb build noauto ${@} 2>&1 | tee "${BUILD_LOG}" ; then
    echo "Image was successfully created"
    echo "Renaming generated files..."
    mv -i "${BUILD_FILENAME_FULL}" "${BUILD_DEST_FILENAME}" # FIXME
    mv -i "${BUILD_FILENAME}.packages" "${BUILD_PACKAGES}" # FIXME
    tar -cJf "${BUILD_CONFIG}" config
else
    echo "lb build failed ($?)."
    exit 1
fi
